// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/moominzie/user-record/ent/branch"
	"github.com/moominzie/user-record/ent/building"
	"github.com/moominzie/user-record/ent/faculty"
	"github.com/moominzie/user-record/ent/room"
	"github.com/moominzie/user-record/ent/user"
)

// User is the model entity for the User schema.
type User struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// PersonalID holds the value of the "personalID" field.
	PersonalID string `json:"personalID,omitempty"`
	// PersonalName holds the value of the "personalName" field.
	PersonalName string `json:"personalName,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserQuery when eager-loading is set.
	Edges       UserEdges `json:"edges"`
	branch_id   *int
	building_id *int
	faculty_id  *int
	room_id     *int
}

// UserEdges holds the relations/edges for other nodes in the graph.
type UserEdges struct {
	// Faculty holds the value of the faculty edge.
	Faculty *Faculty
	// Branch holds the value of the branch edge.
	Branch *Branch
	// Building holds the value of the building edge.
	Building *Building
	// Room holds the value of the room edge.
	Room *Room
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// FacultyOrErr returns the Faculty value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserEdges) FacultyOrErr() (*Faculty, error) {
	if e.loadedTypes[0] {
		if e.Faculty == nil {
			// The edge faculty was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: faculty.Label}
		}
		return e.Faculty, nil
	}
	return nil, &NotLoadedError{edge: "faculty"}
}

// BranchOrErr returns the Branch value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserEdges) BranchOrErr() (*Branch, error) {
	if e.loadedTypes[1] {
		if e.Branch == nil {
			// The edge branch was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: branch.Label}
		}
		return e.Branch, nil
	}
	return nil, &NotLoadedError{edge: "branch"}
}

// BuildingOrErr returns the Building value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserEdges) BuildingOrErr() (*Building, error) {
	if e.loadedTypes[2] {
		if e.Building == nil {
			// The edge building was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: building.Label}
		}
		return e.Building, nil
	}
	return nil, &NotLoadedError{edge: "building"}
}

// RoomOrErr returns the Room value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserEdges) RoomOrErr() (*Room, error) {
	if e.loadedTypes[3] {
		if e.Room == nil {
			// The edge room was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: room.Label}
		}
		return e.Room, nil
	}
	return nil, &NotLoadedError{edge: "room"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*User) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // personalID
		&sql.NullString{}, // personalName
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*User) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // branch_id
		&sql.NullInt64{}, // building_id
		&sql.NullInt64{}, // faculty_id
		&sql.NullInt64{}, // room_id
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the User fields.
func (u *User) assignValues(values ...interface{}) error {
	if m, n := len(values), len(user.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	u.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field personalID", values[0])
	} else if value.Valid {
		u.PersonalID = value.String
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field personalName", values[1])
	} else if value.Valid {
		u.PersonalName = value.String
	}
	values = values[2:]
	if len(values) == len(user.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field branch_id", value)
		} else if value.Valid {
			u.branch_id = new(int)
			*u.branch_id = int(value.Int64)
		}
		if value, ok := values[1].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field building_id", value)
		} else if value.Valid {
			u.building_id = new(int)
			*u.building_id = int(value.Int64)
		}
		if value, ok := values[2].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field faculty_id", value)
		} else if value.Valid {
			u.faculty_id = new(int)
			*u.faculty_id = int(value.Int64)
		}
		if value, ok := values[3].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field room_id", value)
		} else if value.Valid {
			u.room_id = new(int)
			*u.room_id = int(value.Int64)
		}
	}
	return nil
}

// QueryFaculty queries the faculty edge of the User.
func (u *User) QueryFaculty() *FacultyQuery {
	return (&UserClient{config: u.config}).QueryFaculty(u)
}

// QueryBranch queries the branch edge of the User.
func (u *User) QueryBranch() *BranchQuery {
	return (&UserClient{config: u.config}).QueryBranch(u)
}

// QueryBuilding queries the building edge of the User.
func (u *User) QueryBuilding() *BuildingQuery {
	return (&UserClient{config: u.config}).QueryBuilding(u)
}

// QueryRoom queries the room edge of the User.
func (u *User) QueryRoom() *RoomQuery {
	return (&UserClient{config: u.config}).QueryRoom(u)
}

// Update returns a builder for updating this User.
// Note that, you need to call User.Unwrap() before calling this method, if this User
// was returned from a transaction, and the transaction was committed or rolled back.
func (u *User) Update() *UserUpdateOne {
	return (&UserClient{config: u.config}).UpdateOne(u)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (u *User) Unwrap() *User {
	tx, ok := u.config.driver.(*txDriver)
	if !ok {
		panic("ent: User is not a transactional entity")
	}
	u.config.driver = tx.drv
	return u
}

// String implements the fmt.Stringer.
func (u *User) String() string {
	var builder strings.Builder
	builder.WriteString("User(")
	builder.WriteString(fmt.Sprintf("id=%v", u.ID))
	builder.WriteString(", personalID=")
	builder.WriteString(u.PersonalID)
	builder.WriteString(", personalName=")
	builder.WriteString(u.PersonalName)
	builder.WriteByte(')')
	return builder.String()
}

// Users is a parsable slice of User.
type Users []*User

func (u Users) config(cfg config) {
	for _i := range u {
		u[_i].config = cfg
	}
}
