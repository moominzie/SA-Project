// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/moominzie/user-record/ent/branch"
	"github.com/moominzie/user-record/ent/building"
	"github.com/moominzie/user-record/ent/faculty"
	"github.com/moominzie/user-record/ent/predicate"
	"github.com/moominzie/user-record/ent/room"
	"github.com/moominzie/user-record/ent/user"
)

// UserUpdate is the builder for updating User entities.
type UserUpdate struct {
	config
	hooks      []Hook
	mutation   *UserMutation
	predicates []predicate.User
}

// Where adds a new predicate for the builder.
func (uu *UserUpdate) Where(ps ...predicate.User) *UserUpdate {
	uu.predicates = append(uu.predicates, ps...)
	return uu
}

// SetPersonalID sets the personalID field.
func (uu *UserUpdate) SetPersonalID(s string) *UserUpdate {
	uu.mutation.SetPersonalID(s)
	return uu
}

// SetPersonalName sets the personalName field.
func (uu *UserUpdate) SetPersonalName(s string) *UserUpdate {
	uu.mutation.SetPersonalName(s)
	return uu
}

// SetFacultyID sets the faculty edge to Faculty by id.
func (uu *UserUpdate) SetFacultyID(id int) *UserUpdate {
	uu.mutation.SetFacultyID(id)
	return uu
}

// SetNillableFacultyID sets the faculty edge to Faculty by id if the given value is not nil.
func (uu *UserUpdate) SetNillableFacultyID(id *int) *UserUpdate {
	if id != nil {
		uu = uu.SetFacultyID(*id)
	}
	return uu
}

// SetFaculty sets the faculty edge to Faculty.
func (uu *UserUpdate) SetFaculty(f *Faculty) *UserUpdate {
	return uu.SetFacultyID(f.ID)
}

// SetBranchID sets the branch edge to Branch by id.
func (uu *UserUpdate) SetBranchID(id int) *UserUpdate {
	uu.mutation.SetBranchID(id)
	return uu
}

// SetNillableBranchID sets the branch edge to Branch by id if the given value is not nil.
func (uu *UserUpdate) SetNillableBranchID(id *int) *UserUpdate {
	if id != nil {
		uu = uu.SetBranchID(*id)
	}
	return uu
}

// SetBranch sets the branch edge to Branch.
func (uu *UserUpdate) SetBranch(b *Branch) *UserUpdate {
	return uu.SetBranchID(b.ID)
}

// SetBuildingID sets the building edge to Building by id.
func (uu *UserUpdate) SetBuildingID(id int) *UserUpdate {
	uu.mutation.SetBuildingID(id)
	return uu
}

// SetNillableBuildingID sets the building edge to Building by id if the given value is not nil.
func (uu *UserUpdate) SetNillableBuildingID(id *int) *UserUpdate {
	if id != nil {
		uu = uu.SetBuildingID(*id)
	}
	return uu
}

// SetBuilding sets the building edge to Building.
func (uu *UserUpdate) SetBuilding(b *Building) *UserUpdate {
	return uu.SetBuildingID(b.ID)
}

// SetRoomID sets the room edge to Room by id.
func (uu *UserUpdate) SetRoomID(id int) *UserUpdate {
	uu.mutation.SetRoomID(id)
	return uu
}

// SetNillableRoomID sets the room edge to Room by id if the given value is not nil.
func (uu *UserUpdate) SetNillableRoomID(id *int) *UserUpdate {
	if id != nil {
		uu = uu.SetRoomID(*id)
	}
	return uu
}

// SetRoom sets the room edge to Room.
func (uu *UserUpdate) SetRoom(r *Room) *UserUpdate {
	return uu.SetRoomID(r.ID)
}

// Mutation returns the UserMutation object of the builder.
func (uu *UserUpdate) Mutation() *UserMutation {
	return uu.mutation
}

// ClearFaculty clears the faculty edge to Faculty.
func (uu *UserUpdate) ClearFaculty() *UserUpdate {
	uu.mutation.ClearFaculty()
	return uu
}

// ClearBranch clears the branch edge to Branch.
func (uu *UserUpdate) ClearBranch() *UserUpdate {
	uu.mutation.ClearBranch()
	return uu
}

// ClearBuilding clears the building edge to Building.
func (uu *UserUpdate) ClearBuilding() *UserUpdate {
	uu.mutation.ClearBuilding()
	return uu
}

// ClearRoom clears the room edge to Room.
func (uu *UserUpdate) ClearRoom() *UserUpdate {
	uu.mutation.ClearRoom()
	return uu
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (uu *UserUpdate) Save(ctx context.Context) (int, error) {

	var (
		err      error
		affected int
	)
	if len(uu.hooks) == 0 {
		affected, err = uu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			uu.mutation = mutation
			affected, err = uu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(uu.hooks) - 1; i >= 0; i-- {
			mut = uu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, uu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (uu *UserUpdate) SaveX(ctx context.Context) int {
	affected, err := uu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uu *UserUpdate) Exec(ctx context.Context) error {
	_, err := uu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uu *UserUpdate) ExecX(ctx context.Context) {
	if err := uu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uu *UserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   user.Table,
			Columns: user.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: user.FieldID,
			},
		},
	}
	if ps := uu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uu.mutation.PersonalID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldPersonalID,
		})
	}
	if value, ok := uu.mutation.PersonalName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldPersonalName,
		})
	}
	if uu.mutation.FacultyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user.FacultyTable,
			Columns: []string{user.FacultyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: faculty.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.FacultyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user.FacultyTable,
			Columns: []string{user.FacultyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: faculty.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.BranchCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user.BranchTable,
			Columns: []string{user.BranchColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: branch.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.BranchIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user.BranchTable,
			Columns: []string{user.BranchColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: branch.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.BuildingCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user.BuildingTable,
			Columns: []string{user.BuildingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: building.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.BuildingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user.BuildingTable,
			Columns: []string{user.BuildingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: building.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.RoomCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user.RoomTable,
			Columns: []string{user.RoomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: room.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RoomIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user.RoomTable,
			Columns: []string{user.RoomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: room.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// UserUpdateOne is the builder for updating a single User entity.
type UserUpdateOne struct {
	config
	hooks    []Hook
	mutation *UserMutation
}

// SetPersonalID sets the personalID field.
func (uuo *UserUpdateOne) SetPersonalID(s string) *UserUpdateOne {
	uuo.mutation.SetPersonalID(s)
	return uuo
}

// SetPersonalName sets the personalName field.
func (uuo *UserUpdateOne) SetPersonalName(s string) *UserUpdateOne {
	uuo.mutation.SetPersonalName(s)
	return uuo
}

// SetFacultyID sets the faculty edge to Faculty by id.
func (uuo *UserUpdateOne) SetFacultyID(id int) *UserUpdateOne {
	uuo.mutation.SetFacultyID(id)
	return uuo
}

// SetNillableFacultyID sets the faculty edge to Faculty by id if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableFacultyID(id *int) *UserUpdateOne {
	if id != nil {
		uuo = uuo.SetFacultyID(*id)
	}
	return uuo
}

// SetFaculty sets the faculty edge to Faculty.
func (uuo *UserUpdateOne) SetFaculty(f *Faculty) *UserUpdateOne {
	return uuo.SetFacultyID(f.ID)
}

// SetBranchID sets the branch edge to Branch by id.
func (uuo *UserUpdateOne) SetBranchID(id int) *UserUpdateOne {
	uuo.mutation.SetBranchID(id)
	return uuo
}

// SetNillableBranchID sets the branch edge to Branch by id if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableBranchID(id *int) *UserUpdateOne {
	if id != nil {
		uuo = uuo.SetBranchID(*id)
	}
	return uuo
}

// SetBranch sets the branch edge to Branch.
func (uuo *UserUpdateOne) SetBranch(b *Branch) *UserUpdateOne {
	return uuo.SetBranchID(b.ID)
}

// SetBuildingID sets the building edge to Building by id.
func (uuo *UserUpdateOne) SetBuildingID(id int) *UserUpdateOne {
	uuo.mutation.SetBuildingID(id)
	return uuo
}

// SetNillableBuildingID sets the building edge to Building by id if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableBuildingID(id *int) *UserUpdateOne {
	if id != nil {
		uuo = uuo.SetBuildingID(*id)
	}
	return uuo
}

// SetBuilding sets the building edge to Building.
func (uuo *UserUpdateOne) SetBuilding(b *Building) *UserUpdateOne {
	return uuo.SetBuildingID(b.ID)
}

// SetRoomID sets the room edge to Room by id.
func (uuo *UserUpdateOne) SetRoomID(id int) *UserUpdateOne {
	uuo.mutation.SetRoomID(id)
	return uuo
}

// SetNillableRoomID sets the room edge to Room by id if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableRoomID(id *int) *UserUpdateOne {
	if id != nil {
		uuo = uuo.SetRoomID(*id)
	}
	return uuo
}

// SetRoom sets the room edge to Room.
func (uuo *UserUpdateOne) SetRoom(r *Room) *UserUpdateOne {
	return uuo.SetRoomID(r.ID)
}

// Mutation returns the UserMutation object of the builder.
func (uuo *UserUpdateOne) Mutation() *UserMutation {
	return uuo.mutation
}

// ClearFaculty clears the faculty edge to Faculty.
func (uuo *UserUpdateOne) ClearFaculty() *UserUpdateOne {
	uuo.mutation.ClearFaculty()
	return uuo
}

// ClearBranch clears the branch edge to Branch.
func (uuo *UserUpdateOne) ClearBranch() *UserUpdateOne {
	uuo.mutation.ClearBranch()
	return uuo
}

// ClearBuilding clears the building edge to Building.
func (uuo *UserUpdateOne) ClearBuilding() *UserUpdateOne {
	uuo.mutation.ClearBuilding()
	return uuo
}

// ClearRoom clears the room edge to Room.
func (uuo *UserUpdateOne) ClearRoom() *UserUpdateOne {
	uuo.mutation.ClearRoom()
	return uuo
}

// Save executes the query and returns the updated entity.
func (uuo *UserUpdateOne) Save(ctx context.Context) (*User, error) {

	var (
		err  error
		node *User
	)
	if len(uuo.hooks) == 0 {
		node, err = uuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			uuo.mutation = mutation
			node, err = uuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(uuo.hooks) - 1; i >= 0; i-- {
			mut = uuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, uuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (uuo *UserUpdateOne) SaveX(ctx context.Context) *User {
	u, err := uuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return u
}

// Exec executes the query on the entity.
func (uuo *UserUpdateOne) Exec(ctx context.Context) error {
	_, err := uuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uuo *UserUpdateOne) ExecX(ctx context.Context) {
	if err := uuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uuo *UserUpdateOne) sqlSave(ctx context.Context) (u *User, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   user.Table,
			Columns: user.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: user.FieldID,
			},
		},
	}
	id, ok := uuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing User.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := uuo.mutation.PersonalID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldPersonalID,
		})
	}
	if value, ok := uuo.mutation.PersonalName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldPersonalName,
		})
	}
	if uuo.mutation.FacultyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user.FacultyTable,
			Columns: []string{user.FacultyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: faculty.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.FacultyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user.FacultyTable,
			Columns: []string{user.FacultyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: faculty.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.BranchCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user.BranchTable,
			Columns: []string{user.BranchColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: branch.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.BranchIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user.BranchTable,
			Columns: []string{user.BranchColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: branch.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.BuildingCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user.BuildingTable,
			Columns: []string{user.BuildingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: building.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.BuildingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user.BuildingTable,
			Columns: []string{user.BuildingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: building.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.RoomCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user.RoomTable,
			Columns: []string{user.RoomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: room.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RoomIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user.RoomTable,
			Columns: []string{user.RoomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: room.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	u = &User{config: uuo.config}
	_spec.Assign = u.assignValues
	_spec.ScanValues = u.scanValues()
	if err = sqlgraph.UpdateNode(ctx, uuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return u, nil
}
